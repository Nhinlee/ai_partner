// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: chat/voice.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VoiceChatServiceClient is the client API for VoiceChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VoiceChatServiceClient interface {
	VoiceChat(ctx context.Context, in *VoiceChatRequest, opts ...grpc.CallOption) (VoiceChatService_VoiceChatClient, error)
}

type voiceChatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVoiceChatServiceClient(cc grpc.ClientConnInterface) VoiceChatServiceClient {
	return &voiceChatServiceClient{cc}
}

func (c *voiceChatServiceClient) VoiceChat(ctx context.Context, in *VoiceChatRequest, opts ...grpc.CallOption) (VoiceChatService_VoiceChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &VoiceChatService_ServiceDesc.Streams[0], "/pb.VoiceChatService/VoiceChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &voiceChatServiceVoiceChatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VoiceChatService_VoiceChatClient interface {
	Recv() (*VoiceChatResponse, error)
	grpc.ClientStream
}

type voiceChatServiceVoiceChatClient struct {
	grpc.ClientStream
}

func (x *voiceChatServiceVoiceChatClient) Recv() (*VoiceChatResponse, error) {
	m := new(VoiceChatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VoiceChatServiceServer is the server API for VoiceChatService service.
// All implementations must embed UnimplementedVoiceChatServiceServer
// for forward compatibility
type VoiceChatServiceServer interface {
	VoiceChat(*VoiceChatRequest, VoiceChatService_VoiceChatServer) error
	mustEmbedUnimplementedVoiceChatServiceServer()
}

// UnimplementedVoiceChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVoiceChatServiceServer struct {
}

func (UnimplementedVoiceChatServiceServer) VoiceChat(*VoiceChatRequest, VoiceChatService_VoiceChatServer) error {
	return status.Errorf(codes.Unimplemented, "method VoiceChat not implemented")
}
func (UnimplementedVoiceChatServiceServer) mustEmbedUnimplementedVoiceChatServiceServer() {}

// UnsafeVoiceChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VoiceChatServiceServer will
// result in compilation errors.
type UnsafeVoiceChatServiceServer interface {
	mustEmbedUnimplementedVoiceChatServiceServer()
}

func RegisterVoiceChatServiceServer(s grpc.ServiceRegistrar, srv VoiceChatServiceServer) {
	s.RegisterService(&VoiceChatService_ServiceDesc, srv)
}

func _VoiceChatService_VoiceChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VoiceChatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VoiceChatServiceServer).VoiceChat(m, &voiceChatServiceVoiceChatServer{stream})
}

type VoiceChatService_VoiceChatServer interface {
	Send(*VoiceChatResponse) error
	grpc.ServerStream
}

type voiceChatServiceVoiceChatServer struct {
	grpc.ServerStream
}

func (x *voiceChatServiceVoiceChatServer) Send(m *VoiceChatResponse) error {
	return x.ServerStream.SendMsg(m)
}

// VoiceChatService_ServiceDesc is the grpc.ServiceDesc for VoiceChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VoiceChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.VoiceChatService",
	HandlerType: (*VoiceChatServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "VoiceChat",
			Handler:       _VoiceChatService_VoiceChat_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chat/voice.proto",
}
